
heap.c,1009
#undef min4,39
struct heap_node 6,51
  heap_node_t *next;next7,70
  heap_node_t *prev;prev8,91
  heap_node_t *parent;parent9,112
  heap_node_t *child;child10,135
  void *datum;datum11,157
  uint32_t degree;12,172
  uint32_t mark;13,191
#define splice_heap_node_lists(16,212
#define insert_heap_node_in_list(25,524
#define remove_heap_node_from_list(32,748
void print_heap_node(37,881
void print_heap(53,1203
void print_heap_node_list(70,1505
void heap_init(86,1704
void heap_node_delete(96,1940
void heap_delete(114,2244
heap_node_t *heap_insert(heap_insert125,2409
void *heap_peek_min(heap_peek_min145,2725
static void heap_link(150,2801
static void heap_consolidate(164,3123
void *heap_remove_min(heap_remove_min205,4056
int heap_combine(240,4590
static void heap_cut(269,5241
static void heap_cascading_cut(283,5522
int heap_decrease_key(297,5748
int heap_decrease_key_no_replace(311,5990
int32_t compare(335,6564
char *print_int(print_int340,6663
int main(349,6781

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301

macros.h,611
# define MACROS_H2,17
#  define dprintf(16,213
#  define dfprintf(17,256
#  define dprintf(19,320
#  define dfprintf(20,343
# define fieldwidth(23,382
# define exit(37,1201
# define fopen(42,1441
#  define malloc(76,3348
#  define calloc(92,4430
#  define strdup(107,5435
#  define free(117,6055
# define swap(125,6303
# define memswap(131,6415
# define structdup(137,6543
# define datacmp(144,6927
# define max2(153,7400
# define min2(160,7576
# define max 167,7752
# define min 168,7770
# define max3(170,7789
# define min3(171,7830
# define frand(173,7872
# define structdup(180,7984

rlg327.c,2608
#define DUMP_HARDNESS_IMAGES 16,258
# define rand_under(20,403
# define rand_range(24,546
# define UNUSED(25,619
typedef struct corridor_path 27,650
  heap_node_t *hn;hn28,681
  uint8_t pos[pos29,700
  uint8_t from[from30,718
  int32_t cost;31,737
} corridor_path_t;32,753
typedef enum dim 34,773
  dim_x,35,792
  dim_y,36,801
  num_dims37,810
} dim_t;38,821
typedef int16_t pair_t[pair_t40,831
#define DUNGEON_X 42,866
#define DUNGEON_Y 43,900
#define MIN_ROOMS 44,934
#define MAX_ROOMS 45,967
#define ROOM_MIN_X 46,1000
#define ROOM_MIN_Y 47,1033
#define ROOM_MAX_X 48,1066
#define ROOM_MAX_Y 49,1100
#define SAVE_DIR 50,1133
#define DUNGEON_SAVE_FILE 51,1174
#define DUNGEON_SAVE_SEMANTIC 52,1215
#define DUNGEON_SAVE_VERSION 53,1261
#define mappair(55,1296
#define mapxy(56,1353
#define hardnesspair(57,1388
#define hardnessxy(58,1455
typedef enum __attribute__ ((__packed__)) terrain_type 60,1501
  ter_debug,61,1558
  ter_wall,62,1571
  ter_wall_immutable,63,1583
  ter_floor,64,1605
  ter_floor_room,65,1618
  ter_floor_hall,66,1636
  ter_pc,67,1654
} terrain_type_t;68,1664
typedef struct room 70,1683
  pair_t position;71,1705
  pair_t size;72,1724
} room_t;73,1739
typedef struct dungeon 75,1750
  uint32_t num_rooms;76,1775
  room_t *rooms;rooms77,1797
  terrain_type_t map[map78,1814
  uint8_t hardness[hardness87,2467
  pair_t pc;88,2509
} dungeon_t;89,2522
static uint32_t in_room(91,2536
static uint32_t adjacent_to_room(107,2927
static uint32_t is_open_space(115,3188
static int32_t corridor_path_cmp(120,3287
static void dijkstra_corridor(124,3437
static void dijkstra_corridor_inv(223,7174
#define hardnesspair_inv(276,8496
static int connect_two_rooms(326,11167
static int create_cycle(345,11819
static int connect_rooms(387,13384
int gaussian[gaussian400,13577
typedef struct queue_node 408,13733
  int x,409,13761
  int x, y;409,13761
  struct queue_node *next;next410,13773
} queue_node_t;411,13800
static int smooth_hardness(413,13817
static int empty_dungeon(572,18086
static int place_rooms(591,18462
static int make_rooms(628,19649
int gen_dungeon(651,20210
void render_dungeon(663,20353
void delete_dungeon(694,21002
void init_dungeon(699,21059
int write_dungeon_map(704,21116
int write_rooms(717,21345
uint32_t calculate_dungeon_size(737,21764
int makedirectory(744,22011
int write_dungeon(779,22647
int read_dungeon_map(842,24142
int read_rooms(865,24740
int calculate_num_rooms(919,26557
int read_dungeon(927,26797
int read_pgm(1006,28681
void usage(1091,31084
int main(1101,31294
