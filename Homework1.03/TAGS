
heap.c,1009
#undef min4,39
struct heap_node 6,51
  heap_node_t *next;next7,70
  heap_node_t *prev;prev8,91
  heap_node_t *parent;parent9,112
  heap_node_t *child;child10,135
  void *datum;datum11,157
  uint32_t degree;12,172
  uint32_t mark;13,191
#define splice_heap_node_lists(16,212
#define insert_heap_node_in_list(25,524
#define remove_heap_node_from_list(32,748
void print_heap_node(37,881
void print_heap(53,1203
void print_heap_node_list(70,1505
void heap_init(86,1704
void heap_node_delete(96,1940
void heap_delete(114,2244
heap_node_t *heap_insert(heap_insert125,2409
void *heap_peek_min(heap_peek_min145,2725
static void heap_link(150,2801
static void heap_consolidate(164,3123
void *heap_remove_min(heap_remove_min205,4056
int heap_combine(240,4590
static void heap_cut(269,5241
static void heap_cascading_cut(283,5522
int heap_decrease_key(297,5748
int heap_decrease_key_no_replace(311,5990
int32_t compare(335,6564
char *print_int(print_int340,6663
int main(349,6781

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301

macros.h,611
# define MACROS_H2,17
#  define dprintf(16,213
#  define dfprintf(17,256
#  define dprintf(19,320
#  define dfprintf(20,343
# define fieldwidth(23,382
# define exit(37,1201
# define fopen(42,1441
#  define malloc(76,3348
#  define calloc(92,4430
#  define strdup(107,5435
#  define free(117,6055
# define swap(125,6303
# define memswap(131,6415
# define structdup(137,6543
# define datacmp(144,6927
# define max2(153,7400
# define min2(160,7576
# define max 167,7752
# define min 168,7770
# define max3(170,7789
# define min3(171,7830
# define frand(173,7872
# define structdup(180,7984

rlg327.c,2895
#define DUMP_HARDNESS_IMAGES 16,258
# define rand_under(20,403
# define rand_range(24,546
# define UNUSED(25,619
typedef struct corridor_path 27,650
  heap_node_t *hn;hn28,681
  uint8_t pos[pos29,700
  uint8_t from[from30,718
  int32_t cost;31,737
} corridor_path_t;32,753
typedef struct monster_path 35,830
  heap_node_t *hn;hn36,860
  uint8_t pos[pos37,879
  int32_t cost;38,897
} monster_path_t;39,913
typedef enum dim 41,932
  dim_x,42,951
  dim_y,43,960
  num_dims44,969
} dim_t;45,980
typedef int16_t pair_t[pair_t47,990
#define DUNGEON_X 49,1025
#define DUNGEON_Y 50,1059
#define MIN_ROOMS 51,1093
#define MAX_ROOMS 52,1126
#define ROOM_MIN_X 53,1159
#define ROOM_MIN_Y 54,1192
#define ROOM_MAX_X 55,1225
#define ROOM_MAX_Y 56,1259
#define SAVE_DIR 57,1292
#define DUNGEON_SAVE_FILE 58,1333
#define DUNGEON_SAVE_SEMANTIC 59,1374
#define DUNGEON_SAVE_VERSION 60,1420
#define mappair(62,1455
#define mapxy(63,1512
#define hardnesspair(64,1547
#define hardnessxy(65,1614
typedef enum __attribute__ ((__packed__)) terrain_type 67,1660
  ter_debug,68,1717
  ter_wall,69,1730
  ter_wall_immutable,70,1742
  ter_floor,71,1764
  ter_floor_room,72,1777
  ter_floor_hall,73,1795
  ter_pc,74,1813
} terrain_type_t;75,1823
typedef struct room 77,1842
  pair_t position;78,1864
  pair_t size;79,1883
} room_t;80,1898
typedef struct dungeon 82,1909
  uint32_t num_rooms;83,1934
  room_t *rooms;rooms84,1956
  terrain_type_t map[map85,1973
  uint8_t hardness[hardness94,2626
  pair_t pc;95,2668
} dungeon_t;96,2681
static uint32_t in_room(98,2695
static uint32_t adjacent_to_room(114,3086
static uint32_t is_open_space(122,3347
static int32_t corridor_path_cmp(127,3446
static void dijkstra_corridor(131,3596
static void dijkstra_corridor_inv(230,7333
#define hardnesspair_inv(283,8655
static int connect_two_rooms(333,11326
static int create_cycle(352,11978
static int connect_rooms(394,13543
int gaussian[gaussian407,13736
typedef struct queue_node 415,13892
  int x,416,13920
  int x, y;416,13920
  struct queue_node *next;next417,13932
} queue_node_t;418,13959
static int smooth_hardness(420,13976
static int empty_dungeon(579,18245
static int place_rooms(598,18621
static int make_rooms(635,19808
int gen_dungeon(658,20369
void render_dungeon(670,20512
void delete_dungeon(701,21161
void init_dungeon(706,21218
int write_dungeon_map(711,21275
int write_rooms(724,21504
uint32_t calculate_dungeon_size(744,21923
int makedirectory(751,22170
int write_dungeon(786,22806
int read_dungeon_map(849,24301
int read_rooms(872,24899
int calculate_num_rooms(926,26716
int read_dungeon(934,26956
int read_pgm(1013,28840
void usage(1098,31243
static int32_t monster_path_cmp(1112,31457
static void dijkstra_no_rock_monster_path(1117,31605
static void dijkstra_monster_path(1246,36329
int main(1373,40942
